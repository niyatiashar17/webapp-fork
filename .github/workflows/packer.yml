name: Packer-Validate
on:
  pull_request:
    types: [closed]
    branches:
      - main

  workflow_dispatch:

jobs:
  packer-validate-checks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      #Run unit tests
      - name: Run unit tests
        run: |
          npm install --save-dev mocha
          npm test

      - name: Set up Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID}}

      - name: Get credentials file path
        run: echo $GOOGLE_APPLICATION_CREDENTIALS

      - name: Install Packer
        run: |
          curl -o packer.zip https://releases.hashicorp.com/packer/1.7.2/packer_1.7.2_linux_amd64.zip
          unzip packer.zip
          sudo mv packer /usr/local/bin/

      - name: Zip Node.js application
        run: |
          npm run zip
          echo $(pwd)
          echo $(ls-la)
      - name: initialize  packer
        run: |
          cd pkr
          packer init packer.pkr.hcl

      - name: Run packer fmt
        run: |
          cd pkr
          packer fmt -check packer.pkr.hcl
          if [ $? -ne 0 ]; then
            echo "packer fmt has made changes to the packer template. Please run 'packer fmt' locally and commit the changes."
            exit 1
          fi

      - name: Run packer validate
        run: |
          FILE="packer.pkr.hcl"
          cd pkr
          packer validate -var "project_id=${{secrets.GCP_PROJECT_ID}}" -var "credentials=$GOOGLE_APPLICATION_CREDENTIALS" -var "DB_PASSWORD=${{secrets.DB_PASSWORD}}" -var "DB_USERNAME=${{secrets.DB_USERNAME}}" -var "DB_DATABASE=${{secrets.DB_DATABASE}}" -var "PORT=${{secrets.PORT}}" -var "DB_HOST=${{secrets.DB_HOST}}" $FILE || exit 1
          if [ $? -ne 0 ]; then
              echo "packer validate failed to validate the packer template. Please fix the template."
              exit 1
          fi

      - name: Build Application Artifact(s)
        run: |
          npm install
          npm run zip

      - name: Build machine images
        run: |
          # Upgrade OS packages
          sudo apt-get update && sudo apt-get upgrade -y

          # Install dependencies (python, node.js, etc.)
          sudo apt-get install -y nodejs

          # Install application dependencies from package.json
          npm install

          # # Install application dependencies (pip install for Python)
          # pip3 install -r requirements.txt

          # Set up the application by copying the application artifacts and the configuration files
          mkdir /app
          cp -r . /app
          cp config.json /app

          # Configure the application to start automatically when VM is launched
          echo "NODE_ENV=prod && nodemon index.js" >> ~/.bashrc

          # Build machine image using Packer
          packer build packer.pkr.hcl

          # Configure Google Cloud credentials
      - uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_SA_KEY }}
          export_default_credentials: true

          # Get the latest image ID
      - name: Get Latest Image ID
        run: |
          latest_image_id=$(gcloud compute images list --sort-by=creationTimestamp --format='value(id)' --limit=1)
          echo "latest_image_id=$latest_image_id" >> $GITHUB_ENV

      # Create a new Instance Template version
      - name: Create New Instance Template
        run: |
          gcloud beta compute instance-templates create webapp-instance-${{ github.sha }} \
          --project=${{ secrets.GOOGLE_PROJECT_ID }} \
          --machine-type=e2-standard-2 \
          --network-interface=network-tier=STANDARD,subnet=webapp-subnet \
          --instance-template-region=us-east4 \
          --metadata=startup-script='#!/bin/bash
          echo "spring.datasource.url=jdbc:mysql://10.15.0.2:3306/webapp?createDatabaseIfNotExist=true" >> /opt/csye6225/application.properties
          echo "spring.datasource.username=webapp" >> /opt/csye6225/application.properties
          echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> /opt/csye6225/application.properties
          echo "spring.jpa.hibernate.ddl-auto=update" >> /opt/csye6225/application.properties
          echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect" >> /opt/csye6225/application.properties
          echo "projectId=${{ secrets.GOOGLE_PROJECT_ID }}" >> /opt/csye6225/application.properties
          echo "topicId=verify_email" >> /opt/csye6225/application.properties' \
          --maintenance-policy=MIGRATE \
          --provisioning-model=STANDARD \
          --service-account=webapp-sa@${{ secrets.GOOGLE_PROJECT_ID }}.iam.gserviceaccount.com \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --region=us-east4 \
          --tags=webapp-instance \
          --create-disk=auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=projects/${{ secrets.GOOGLE_PROJECT_ID }}/global/images/${{ env.latest_image_id }},mode=rw,size=20,type=pd-standard \
          --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring \
          --reservation-affinity=any

      # Set the new Instance Template for the Managed Instance Group
      - name: Set New Template for the Managed Instance Group
        run: |
          gcloud compute instance-groups managed set-instance-template webapp-instance-group --instance-template=webapp-instance-${{ github.sha }} --zone=us-east4-c

      # Start a rolling update for the Managed Instance Group
      - name: Start Rolling Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update webapp-instance-group --version=template=webapp-instance-${{ github.sha }} --max-surge=5 --zone=us-east4-c

      # Monitor the rolling update progress
      - name: Monitor Rolling Update
        run: |
          while true; do
          status=$(gcloud compute instance-groups managed describe webapp-instance-group --zone=us-east4-c --format='value(currentAction)')
          if [ "$status" == "NONE" ]; then
            echo "Rolling update completed successfully"
            break
          elif [ "$status" == "ROLLING_OUT" ]; then
            echo "Rolling update in progress"
          else
            echo "Error occurred during rolling update: $status"
            exit 1
          fi
            sleep 10
          done
